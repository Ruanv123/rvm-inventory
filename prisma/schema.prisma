// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  imageUrl    String

  ownerId Int

  users      User[]
  products   Product[]
  suppliers  Supplier[]
  categories Category[]
  Movement   Movement[]

  status    Status     @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Sale      Sale[]
  Customer  Customer[]
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  avatarUrl  String?
  resetToken String?
  role       UserRole @default(USER)

  status         Status       @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Product {
  id            Int     @id @default(autoincrement())
  name          String
  description   String
  barCode       String  @unique
  imageUrl      String?
  price         Float
  stockQuantity Int

  supplierId     Int
  categoryId     Int
  organizationId Int

  Category  Category   @relation(fields: [categoryId], references: [id])
  Supplier  Supplier   @relation(fields: [supplierId], references: [id])
  movements Movement[]

  status       Status       @default(ACTIVE)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Organization Organization @relation(fields: [organizationId], references: [id])
  SaleItem     SaleItem[]
}

model Category {
  id     Int    @id @default(autoincrement())
  name   String
  status Status @default(ACTIVE)

  products       Product[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Supplier {
  id      Int      @id @default(autoincrement())
  name    String
  contact String[]
  address String?
  website String?

  products Product[]

  status         Status       @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId Int
}

model Movement {
  id        Int          @id @default(autoincrement())
  quantity  Int
  type      MovementType
  reason    String?
  date      DateTime     @default(now())
  Product   Product      @relation(fields: [productId], references: [id])
  productId Int

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
}

model Sale {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  customerId     Int
  customer       Customer     @relation(fields: [customerId], references: [id])
  saleDate       DateTime     @default(now())
  totalAmount    Float
  saleItems      SaleItem[]
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  saleId    Int
  sale      Sale    @relation(fields: [saleId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Customer {
  id             Int          @id @default(autoincrement())
  name           String
  contact        String[]
  address        String?
  website        String?
  customerType   CustomerType @default(FISICAL)
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  sales          Sale[]
}

model Notification {
  id        Int                @id @default(autoincrement())
  message   String
  status    NotificationStatus
  createdAt DateTime           @default(now())
}

enum CustomerType {
  FISICAL
  LEGAL
}

enum Status {
  ACTIVE
  DELETED
}

enum MovementType {
  IN
  OUT
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

enum NotificationStatus {
  READ
  UNREAD
}
